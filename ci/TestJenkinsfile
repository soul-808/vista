pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'your-registry.com'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Frontend') {
            steps {
                dir('apps/frontend') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Build Backend') {
            steps {
                dir('apps/backend') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('apps/backend') {
                    sh 'mvn test'
                }
                dir('apps/frontend') {
                    sh 'npm test'
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    docker.build("${DOCKER_REGISTRY}/vista-frontend:${IMAGE_TAG}", "./docker/frontend")
                    docker.build("${DOCKER_REGISTRY}/vista-backend:${IMAGE_TAG}", "./docker/backend")
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    docker.withRegistry("https://${DOCKER_REGISTRY}", 'docker-credentials') {
                        docker.image("${DOCKER_REGISTRY}/vista-frontend:${IMAGE_TAG}").push()
                        docker.image("${DOCKER_REGISTRY}/vista-backend:${IMAGE_TAG}").push()
                    }
                }
            }
        }

        stage('Deploy to OpenShift') {
            steps {
                script {
                    sh "oc apply -f ci/openshift/frontend-deploy.yaml"
                    sh "oc apply -f ci/openshift/backend-deploy.yaml"
                    sh "oc apply -f ci/openshift/configmap.yaml"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
